# Campus Study Buddy - Infrastructure Deployment
# This workflow deploys the infrastructure using Terraform

name: 'Infrastructure Deployment'

on:
  push:
    branches:
      - master
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'infra/terraform/**'
      - '.github/workflows/infrastructure.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  TF_VAR_database_admin_password: ${{ secrets.TF_VAR_database_admin_password }}

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    defaults:
      run:
        shell: bash
        working-directory: infra/terraform
    
    outputs:
      tfplanExitCode: ${{ steps.plan.outputs.exitcode }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0
        terraform_wrapper: false
    
    - name: Configure Azure CLI
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
    
    - name: Terraform Init
      run: terraform init -backend-config="environments/prod/-backend-config"
    
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
    
    - name: Terraform Validate
      run: terraform validate
    
    # TEMPORARY DEBUG STEP: This step is for troubleshooting the terraform.tfvars issue.
    # Remove this step once the terraform.tfvars issue is resolved.
    - name: Debug - List files
      run: |
        echo "Current directory:"
        pwd
        echo "Files in current directory:"
        ls -la
        echo "Files in environments/prod:"
        ls -la environments/prod/
        echo "Check if terraform.tfvars exists:"
        test -f environments/prod/terraform.tfvars && echo "File exists" || echo "File does not exist"
    
    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var-file="environments/prod/terraform.tfvars" \
          -out=tfplan \
          -detailed-exitcode
      continue-on-error: true
    
    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`terraform
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: infra/terraform/tfplan
        retention-days: 5

  terraform-apply:
    name: 'Terraform Apply'
    if: |
      (github.ref == 'refs/heads/master' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    runs-on: ubuntu-latest
    environment: production
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_database_admin_password: ${{ secrets.TF_VAR_database_admin_password }}
    
    defaults:
      run:
        shell: bash
        working-directory: infra/terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0
    
    - name: Configure Azure CLI
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
    
    - name: Terraform Init
      run: terraform init -backend-config="environments/prod/-backend-config"
    
    - name: Terraform Apply
      run: |
        terraform plan \
          -var-file="environments/prod/terraform.tfvars" \
          -out=tfplan
        terraform apply -auto-approve tfplan
    
    - name: Output Important Information
      run: |
        echo "## üöÄ Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Key Outputs:" >> $GITHUB_STEP_SUMMARY
        echo "- **API Endpoint:** $(terraform output -raw api_endpoint)" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend URL:** $(terraform output -raw frontend_url)" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group:** $(terraform output -raw resource_group_name)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Deploy application code to Container Apps" >> $GITHUB_STEP_SUMMARY
        echo "2. Deploy frontend to Static Web Apps" >> $GITHUB_STEP_SUMMARY
        echo "3. Run database migrations" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Terraform Destroy'
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    environment: production
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_database_admin_password: ${{ secrets.TF_VAR_database_admin_password }}
    
    defaults:
      run:
        shell: bash
        working-directory: infra/terraform
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5.0
    
    - name: Configure Azure CLI
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }
    
    - name: Terraform Init
      run: terraform init -backend-config="environments/prod/-backend-config"
    
    - name: Terraform Destroy
      run: |
        terraform plan \
          -var-file="environments/prod/terraform.tfvars" \
          -destroy \
          -out=destroy-plan
        terraform apply -auto-approve destroy-plan
    
    - name: Output Destruction Summary
      run: |
        echo "## ‚ö†Ô∏è Infrastructure Destroyed" >> $GITHUB_STEP_SUMMARY
        echo "All Azure resources have been destroyed." >> $GITHUB_STEP_SUMMARY
